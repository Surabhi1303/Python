{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Surabhi1303/Python/blob/master/Practice1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hwUw_4XJHKsc",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 306
        },
        "outputId": "9ba543ef-9014-4f13-f206-c09c53d1aa08"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "df=pd.read_csv(\"Dataset_spine.csv\")\n",
        "sns.heatmap(df.corr(),cmap=\"Greens\")"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7febdb3d8128>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 84
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5gOaG6NVIO5S",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "outputId": "fb3136f8-d29d-49c2-c64d-ca7f6e99400f"
      },
      "source": [
        "sns.distplot(df.Col8,bins=6)\n",
        "plt.ylabel(\"values\")\n",
        "plt.xticks(rotation=45)"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([-10.,   0.,  10.,  20.,  30.,  40.,  50.]),\n",
              " <a list of 7 Text xticklabel objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 85
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nVHzBAAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "876aaEkpLvwu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 338
        },
        "outputId": "d135095e-4df0-4c72-a339-62cb44f6480c"
      },
      "source": [
        "plt.hist(df.Col8,bins=6)"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([61., 51., 42., 62., 51., 43.]),\n",
              " array([ 7.027     , 11.97981667, 16.93263333, 21.88545   , 26.83826667,\n",
              "        31.79108333, 36.7439    ]),\n",
              " <a list of 6 Patch objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 86
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KaUIg-MkMPLt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        },
        "outputId": "afd3cf76-f16a-470c-cfc5-94043750a026"
      },
      "source": [
        "plt.hlines(30,0,37)"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.LineCollection at 0x7febdb218630>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD4CAYAAADiry33AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAARgUlEQVR4nO3df6xkZX3H8feH3UWIYMHs1eDu4uKv\nKNWy4JRgsZZuAiJNxEZt0NSQqN36K4K1pmiMitVETeuPP9rSLaj8gSL1J1KtbtKlFqsLs7KAu4u6\noEYW6l6rREksFvz2jzmr12Xm3rncuzuzT9+vZDJnnvM8Z75zsvPZM8+cuSdVhSSpXUdMugBJ0sFl\n0EtS4wx6SWqcQS9JjTPoJalxKyddwDCrV6+u9evXT7oMSTpsbN++/UdVNTNs3VQG/fr16+n3+5Mu\nQ5IOG0m+P2qdUzeS1DiDXpIaZ9BLUuMMeklqnEEvSY1bMOiTHJXkxiS3JNmZ5NKu/XVJ9iSpJKvn\nGf9gkh3d7drlLF6StLBxTq+8H9hYVfclWQXckOSLwFeB64DrFxj/86rasLQyJUkP14JBX4O/Y3xf\n93BVd6uquhkgycGrTpK0ZGPN0SdZkWQHsA/YUlXbFvEcRyXpJ/l6khfM8xybun792dnZRWxekjSf\nsYK+qh7spl/WAqcnefoinuPxVdUDXgp8MMkTRzzH5qrqVVVvZmbor3glSQ/Dos66qap7ga3AuYsY\ns7e7v5PBfP6pi3lOSdLSjHPWzUyS47rlo4GzgdvH2XiS45M8olteDZwJ7Hr45UqSFmucI/oTgK1J\nbgVuYjBHf12S1ye5i8F0zq1JLgdI0tu/DDwN6Ce5hcEngfdUlUEvSYdQpvHi4L1er/zrlZI0viTb\nu+9DH8JfxkpS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z\n6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINe\nkhq3YNAnOSrJjUluSbIzyaVd++uS7ElSSVbPM/7CJN/pbhcuZ/GSpIWtHKPP/cDGqrovySrghiRf\nBL4KXAdcP2pgkkcDbwd6QAHbk1xbVT9ZcuWSpLEseERfA/d1D1d1t6qqm6vqewsMfy6wpap+3IX7\nFuDcpRQsSVqcsebok6xIsgPYxyC4t425/TXAD+Y8vqtrG/Ycm5L0k/RnZ2fH3LwkaSFjBX1VPVhV\nG4C1wOlJnr7chVTV5qrqVVVvZmZmuTcvSf9vLeqsm6q6F9jK+NMve4F1cx6v7dokSYfIOGfdzCQ5\nrls+GjgbuH3M7X8JOCfJ8UmOB87p2iRJh8g4R/QnAFuT3ArcxGCO/rokr09yF4Oj9FuTXA6QpLd/\nuap+DPx1N+4m4J1dmyTpEElVTbqGh+j1etXv9yddhiQdNpJsr6resHX+MlaSGmfQS1LjDHpJapxB\nL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS\n1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktS4BYM+yVFJbkxyS5KdSS7t2k9K\nsi3JniSfSHLkkLHrk/w8yY7udtnBeBGSpNHGOaK/H9hYVacAG4Bzk5wBvBf4QFU9CfgJ8IoR4++o\nqg3d7VXLUrUkaWwLBn0N3Nc9XNXdCtgIfLJrvxJ4wUGpUJK0JGPN0SdZkWQHsA/YAtwB3FtVD3Rd\n7gLWjBh+UpKbk/x7kt+f5zk2Jekn6c/Ozi7iJUiS5jNW0FfVg1W1AVgLnA48dczt3wOcWFWnAn8B\nfCzJo0Y8x+aq6lVVb2ZmZszNS5IWsqizbqrqXmAr8CzguCQru1Vrgb1D+t9fVf/dLW9n8EngKUuq\nWJK0KOOcdTOT5Lhu+WjgbGA3g8B/UdftQuBzI8au6JafADwZuHN5SpckjWPlwl04AbiyC+wjgGuq\n6roku4Crk7wLuBm4AiDJ84FeVb0NeA7wziT/C/wSeFVV/fhgvBBJ0nCpqknX8BC9Xq/6/f6ky5Ck\nw0aS7VXVG7bOX8ZKUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxB\nL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS\n1DiDXpIat2DQJzkqyY1JbkmyM8mlXftJSbYl2ZPkE0mOHDH+zV2fbyV57nK/AEnS/MY5or8f2FhV\npwAbgHOTnAG8F/hAVT0J+AnwigMHJjkZuAD4beBc4O+TrFiu4iVJC1u5UIeqKuC+7uGq7lbARuCl\nXfuVwDuAfzhg+PnA1VV1P/DdJHuA04GvLbnyEc4666yDtWlJOqiuv/76g7Ldsebok6xIsgPYB2wB\n7gDuraoHui53AWuGDF0D/GDO41H9SLIpST9Jf3Z2dtz6JUkLWPCIHqCqHgQ2JDkO+Azw1OUupKo2\nA5sBer1ePdztHKz/ESXpcLWos26q6l5gK/As4Lgk+/+jWAvsHTJkL7BuzuNR/SRJB8k4Z93MdEfy\nJDkaOBvYzSDwX9R1uxD43JDh1wIXJHlEkpOAJwM3LkfhkqTxjDN1cwJwZXe2zBHANVV1XZJdwNVJ\n3gXcDFwBkOT5QK+q3lZVO5NcA+wCHgBe200DSZIOkQxOqpkuvV6v+v3+pMuQpMNGku1V1Ru2zl/G\nSlLjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0k\nNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGrdg0CdZ\nl2Rrkl1Jdia5qGs/JcnXktyW5PNJHjVi/Pe6PjuS9Jf7BUiS5jfOEf0DwBur6mTgDOC1SU4GLgcu\nqapnAJ8B3jTPNv6wqjZUVW/JFUuSFmXBoK+qe6rqG93yz4DdwBrgKcBXum5bgBcerCIlSQ/foubo\nk6wHTgW2ATuB87tVLwbWjRhWwJeTbE+yaZ5tb0rST9KfnZ1dTFmSpHmMHfRJjgE+BVxcVT8FXg68\nJsl24FjgFyOGPruqTgOex2Da5znDOlXV5qrqVVVvZmZmUS9CkjTaWEGfZBWDkL+qqj4NUFW3V9U5\nVfVM4OPAHcPGVtXe7n4fg7n805ejcEnSeMY56ybAFcDuqnr/nPbHdPdHAG8FLhsy9pFJjt2/DJwD\nfHN5SpckjWOcI/ozgZcBG7tTJHckOQ94SZJvA7cDdwMfAUjyuCRf6MY+FrghyS3AjcC/VNW/Lvur\nkCSNtHKhDlV1A5ARqz80pP/dwHnd8p3AKUspUJK0NP4yVpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9\nJDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS\n4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1LgFgz7JuiRbk+xKsjPJRV37KUm+luS2JJ9P8qgR\n489N8q0ke5JcstwvQJI0v3GO6B8A3lhVJwNnAK9NcjJwOXBJVT0D+AzwpgMHJlkB/B3wPOBk4CXd\nWEnSIbJg0FfVPVX1jW75Z8BuYA3wFOArXbctwAuHDD8d2FNVd1bVL4CrgfOXo3BJ0ngWNUefZD1w\nKrAN2MmvQ/vFwLohQ9YAP5jz+K6ubdi2NyXpJ+nPzs4upixJ0jzGDvokxwCfAi6uqp8CLwdek2Q7\ncCzwi6UUUlWbq6pXVb2ZmZmlbEqSNMfKcTolWcUg5K+qqk8DVNXtwDnd+qcAfzRk6F5+80h/bdcm\nSTpExjnrJsAVwO6qev+c9sd090cAbwUuGzL8JuDJSU5KciRwAXDtchQuSRrPOFM3ZwIvAzYm2dHd\nzmNwBs23gduBu4GPACR5XJIvAFTVA8DrgC8x+BL3mqraeRBehyRphFTVpGt4iF6vV/1+f9JlSNJh\nI8n2quoNW+cvYyWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCX\npMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklq\nnEEvSY1bMOiTrEuyNcmuJDuTXNS1b0jy9SQ7kvSTnD5i/INdnx1Jrl3uFyBJmt/KMfo8ALyxqr6R\n5Fhge5ItwPuAS6vqi0nO6x6fNWT8z6tqw7JVLElalAWDvqruAe7pln+WZDewBijgUV233wLuPlhF\nSpIevnGO6H8lyXrgVGAbcDHwpSR/w2AK6PdGDDsqSZ/BJ4P3VNVnR2x7E7AJ4MQTT1xMWZKkeYz9\nZWySY4BPARdX1U+BVwNvqKp1wBuAK0YMfXxV9YCXAh9M8sRhnapqc1X1qqo3MzOzqBchSRptrKBP\nsopByF9VVZ/umi8E9i//MzD0y9iq2tvd3wlcz+ATgSTpEBnnrJswOFrfXVXvn7PqbuAPuuWNwHeG\njD0+ySO65dXAmcCupRYtSRrfOHP0ZwIvA25LsqNrewvwZ8CHkqwE/odufj1JD3hVVb0SeBrwj0l+\nyeA/lfdUlUEvSYfQOGfd3ABkxOpnDunfB17ZLf8n8IylFChJWhp/GStJjTPoJalxBr0kNc6gl6TG\npaomXcNDJJkFvv8wh68GfrSM5RwM1rg8rHF5HA41wuFR5yRrfHxVDf216VQG/VIk6Xe/xJ1a1rg8\nrHF5HA41wuFR57TW6NSNJDXOoJekxrUY9JsnXcAYrHF5WOPyOBxqhMOjzqmssbk5eknSb2rxiF6S\nNIdBL0mNaybok5yb5FtJ9iS5ZNL1jJLke0lu239R9UnXA5Dkw0n2JfnmnLZHJ9mS5Dvd/fFTWOM7\nkuydc/H58yZc47okW5PsSrIzyUVd+9Tsy3lqnJp9meSoJDcmuaWr8dKu/aQk27r3+CeSHDmFNX40\nyXfn7MfpuF52VR32N2AFcAfwBOBI4Bbg5EnXNaLW7wGrJ13HATU9BzgN+OactvcBl3TLlwDvncIa\n3wH85aT335x6TgBO65aPBb4NnDxN+3KeGqdmXzL4a7nHdMurGFy69AzgGuCCrv0y4NVTWONHgRdN\neh8eeGvliP50YE9V3VlVvwCuBs6fcE2Hjar6CvDjA5rPB67slq8EXnBIizrAiBqnSlXdU1Xf6JZ/\nBuwG1jBF+3KeGqdGDdzXPVzV3YrBBY4+2bVPej+OqnEqtRL0a4AfzHl8F1P2j3eOAr6cZHt3QfRp\n9diquqdb/i/gsZMsZh6vS3JrN7Uz0emluZKsZ3DZzG1M6b48oEaYon2ZZEV3oaN9wBYGn9jvraoH\nui4Tf48fWGNV7d+P7+724wf2X2Fv0loJ+sPJs6vqNOB5wGuTPGfSBS2kBp9Pp/Fo5R+AJwIbgHuA\nv51sOQNJjmFwjeWLq+qnc9dNy74cUuNU7cuqerCqNgBrGXxif+ok6xnmwBqTPB14M4Nafxd4NPBX\nEyzxV1oJ+r3AujmP13ZtU6d+fbH0fcBnGHFR9SnwwyQnAHT3+yZcz0NU1Q+7N9svgX9iCvZlklUM\nAvSqqvp01zxV+3JYjdO4LwGq6l5gK/As4Lju0qUwRe/xOTWe202NVVXdD3yEKdmPrQT9TcCTu2/l\njwQuAK6dcE0PkeSRSY7dvwycA3xz/lETcy1wYbd8IfC5CdYy1P7w7PwxE96XSQJcAeyuqvfPWTU1\n+3JUjdO0L5PMJDmuWz4aOJvBdwlbgRd13Sa9H4fVePuc/9DD4DuEqXh/N/PL2O50sA8yOAPnw1X1\n7gmX9BBJnsDgKB4G1+v92DTUmeTjwFkM/sTqD4G3A59lcJbDiQz+ZPSfVNXEvgwdUeNZDKYaisHZ\nTH8+Zy78kEvybOA/gNuAX3bNb2EwBz4V+3KeGl/ClOzLJL/D4MvWFQwORq+pqnd275+rGUyJ3Az8\naXfkPE01/hsww+CsnB3Aq+Z8aTsxzQS9JGm4VqZuJEkjGPSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z\n6CWpcf8HBi7+cap/Zf0AAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FafyIGPgk0mL",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "ec4b75fc-c3dc-4805-b2a9-00ad88cf3670"
      },
      "source": [
        "df.head(5)"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Col1</th>\n",
              "      <th>Col2</th>\n",
              "      <th>Col3</th>\n",
              "      <th>Col4</th>\n",
              "      <th>Col5</th>\n",
              "      <th>Col6</th>\n",
              "      <th>Col7</th>\n",
              "      <th>Col8</th>\n",
              "      <th>Col9</th>\n",
              "      <th>Col10</th>\n",
              "      <th>Col11</th>\n",
              "      <th>Col12</th>\n",
              "      <th>Class_att</th>\n",
              "      <th>Unnamed: 13</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>63.027818</td>\n",
              "      <td>22.552586</td>\n",
              "      <td>39.609117</td>\n",
              "      <td>40.475232</td>\n",
              "      <td>98.672917</td>\n",
              "      <td>-0.254400</td>\n",
              "      <td>0.744503</td>\n",
              "      <td>12.5661</td>\n",
              "      <td>14.5386</td>\n",
              "      <td>15.30468</td>\n",
              "      <td>-28.658501</td>\n",
              "      <td>43.5123</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>39.056951</td>\n",
              "      <td>10.060991</td>\n",
              "      <td>25.015378</td>\n",
              "      <td>28.995960</td>\n",
              "      <td>114.405425</td>\n",
              "      <td>4.564259</td>\n",
              "      <td>0.415186</td>\n",
              "      <td>12.8874</td>\n",
              "      <td>17.5323</td>\n",
              "      <td>16.78486</td>\n",
              "      <td>-25.530607</td>\n",
              "      <td>16.1102</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>68.832021</td>\n",
              "      <td>22.218482</td>\n",
              "      <td>50.092194</td>\n",
              "      <td>46.613539</td>\n",
              "      <td>105.985135</td>\n",
              "      <td>-3.530317</td>\n",
              "      <td>0.474889</td>\n",
              "      <td>26.8343</td>\n",
              "      <td>17.4861</td>\n",
              "      <td>16.65897</td>\n",
              "      <td>-29.031888</td>\n",
              "      <td>19.2221</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>Prediction is done by using binary classificat...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>69.297008</td>\n",
              "      <td>24.652878</td>\n",
              "      <td>44.311238</td>\n",
              "      <td>44.644130</td>\n",
              "      <td>101.868495</td>\n",
              "      <td>11.211523</td>\n",
              "      <td>0.369345</td>\n",
              "      <td>23.5603</td>\n",
              "      <td>12.7074</td>\n",
              "      <td>11.42447</td>\n",
              "      <td>-30.470246</td>\n",
              "      <td>18.8329</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>49.712859</td>\n",
              "      <td>9.652075</td>\n",
              "      <td>28.317406</td>\n",
              "      <td>40.060784</td>\n",
              "      <td>108.168725</td>\n",
              "      <td>7.918501</td>\n",
              "      <td>0.543360</td>\n",
              "      <td>35.4940</td>\n",
              "      <td>15.9546</td>\n",
              "      <td>8.87237</td>\n",
              "      <td>-16.378376</td>\n",
              "      <td>24.9171</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Col1  ...                                        Unnamed: 13\n",
              "0  63.027818  ...                                                NaN\n",
              "1  39.056951  ...                                                NaN\n",
              "2  68.832021  ...  Prediction is done by using binary classificat...\n",
              "3  69.297008  ...                                                NaN\n",
              "4  49.712859  ...                                                NaN\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ed7eVwKYk2OV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 243
        },
        "outputId": "91595604-8fb5-4293-e60c-d2a058dc1f82"
      },
      "source": [
        "df.tail(5)"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Col1</th>\n",
              "      <th>Col2</th>\n",
              "      <th>Col3</th>\n",
              "      <th>Col4</th>\n",
              "      <th>Col5</th>\n",
              "      <th>Col6</th>\n",
              "      <th>Col7</th>\n",
              "      <th>Col8</th>\n",
              "      <th>Col9</th>\n",
              "      <th>Col10</th>\n",
              "      <th>Col11</th>\n",
              "      <th>Col12</th>\n",
              "      <th>Class_att</th>\n",
              "      <th>Unnamed: 13</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>305</th>\n",
              "      <td>47.903565</td>\n",
              "      <td>13.616688</td>\n",
              "      <td>36.000000</td>\n",
              "      <td>34.286877</td>\n",
              "      <td>117.449062</td>\n",
              "      <td>-4.245395</td>\n",
              "      <td>0.129744</td>\n",
              "      <td>7.8433</td>\n",
              "      <td>14.7484</td>\n",
              "      <td>8.51707</td>\n",
              "      <td>-15.728927</td>\n",
              "      <td>11.5472</td>\n",
              "      <td>Normal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>306</th>\n",
              "      <td>53.936748</td>\n",
              "      <td>20.721496</td>\n",
              "      <td>29.220534</td>\n",
              "      <td>33.215251</td>\n",
              "      <td>114.365845</td>\n",
              "      <td>-0.421010</td>\n",
              "      <td>0.047913</td>\n",
              "      <td>19.1986</td>\n",
              "      <td>18.1972</td>\n",
              "      <td>7.08745</td>\n",
              "      <td>6.013843</td>\n",
              "      <td>43.8693</td>\n",
              "      <td>Normal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307</th>\n",
              "      <td>61.446597</td>\n",
              "      <td>22.694968</td>\n",
              "      <td>46.170347</td>\n",
              "      <td>38.751628</td>\n",
              "      <td>125.670725</td>\n",
              "      <td>-2.707880</td>\n",
              "      <td>0.081070</td>\n",
              "      <td>16.2059</td>\n",
              "      <td>13.5565</td>\n",
              "      <td>8.89572</td>\n",
              "      <td>3.564463</td>\n",
              "      <td>18.4151</td>\n",
              "      <td>Normal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>308</th>\n",
              "      <td>45.252792</td>\n",
              "      <td>8.693157</td>\n",
              "      <td>41.583126</td>\n",
              "      <td>36.559635</td>\n",
              "      <td>118.545842</td>\n",
              "      <td>0.214750</td>\n",
              "      <td>0.159251</td>\n",
              "      <td>14.7334</td>\n",
              "      <td>16.0928</td>\n",
              "      <td>9.75922</td>\n",
              "      <td>5.767308</td>\n",
              "      <td>33.7192</td>\n",
              "      <td>Normal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>309</th>\n",
              "      <td>33.841641</td>\n",
              "      <td>5.073991</td>\n",
              "      <td>36.641233</td>\n",
              "      <td>28.767649</td>\n",
              "      <td>123.945244</td>\n",
              "      <td>-0.199249</td>\n",
              "      <td>0.674504</td>\n",
              "      <td>19.3825</td>\n",
              "      <td>17.6963</td>\n",
              "      <td>13.72929</td>\n",
              "      <td>1.783007</td>\n",
              "      <td>40.6049</td>\n",
              "      <td>Normal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          Col1       Col2       Col3  ...    Col12  Class_att  Unnamed: 13\n",
              "305  47.903565  13.616688  36.000000  ...  11.5472     Normal          NaN\n",
              "306  53.936748  20.721496  29.220534  ...  43.8693     Normal          NaN\n",
              "307  61.446597  22.694968  46.170347  ...  18.4151     Normal          NaN\n",
              "308  45.252792   8.693157  41.583126  ...  33.7192     Normal          NaN\n",
              "309  33.841641   5.073991  36.641233  ...  40.6049     Normal          NaN\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_pjHEaI_k6a6",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 271
        },
        "outputId": "1dfc1177-95ab-4099-cb68-dc689ffcacc6"
      },
      "source": [
        "df.info"
      ],
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method DataFrame.info of           Col1  ...                                        Unnamed: 13\n",
              "0    63.027818  ...                                                NaN\n",
              "1    39.056951  ...                                                NaN\n",
              "2    68.832021  ...  Prediction is done by using binary classificat...\n",
              "3    69.297008  ...                                                NaN\n",
              "4    49.712859  ...                                                NaN\n",
              "..         ...  ...                                                ...\n",
              "305  47.903565  ...                                                NaN\n",
              "306  53.936748  ...                                                NaN\n",
              "307  61.446597  ...                                                NaN\n",
              "308  45.252792  ...                                                NaN\n",
              "309  33.841641  ...                                                NaN\n",
              "\n",
              "[310 rows x 14 columns]>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sxm9xq84lBeQ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 271
        },
        "outputId": "cc481788-d90b-4432-db2b-6aa7e2c9b2e9"
      },
      "source": [
        "df.describe"
      ],
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.describe of           Col1  ...                                        Unnamed: 13\n",
              "0    63.027818  ...                                                NaN\n",
              "1    39.056951  ...                                                NaN\n",
              "2    68.832021  ...  Prediction is done by using binary classificat...\n",
              "3    69.297008  ...                                                NaN\n",
              "4    49.712859  ...                                                NaN\n",
              "..         ...  ...                                                ...\n",
              "305  47.903565  ...                                                NaN\n",
              "306  53.936748  ...                                                NaN\n",
              "307  61.446597  ...                                                NaN\n",
              "308  45.252792  ...                                                NaN\n",
              "309  33.841641  ...                                                NaN\n",
              "\n",
              "[310 rows x 14 columns]>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VrUesuC2lHtA",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 962
        },
        "outputId": "698c05e3-b689-4e99-e078-b5734f4bcd5c"
      },
      "source": [
        "df.min(),df.max(),df.mean(),df.count"
      ],
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(Col1            26.1479\n",
              " Col2           -6.55495\n",
              " Col3                 14\n",
              " Col4            13.3669\n",
              " Col5            70.0826\n",
              " Col6           -11.0582\n",
              " Col7         0.00322026\n",
              " Col8              7.027\n",
              " Col9             7.0378\n",
              " Col10            7.0306\n",
              " Col11          -35.2874\n",
              " Col12            7.0079\n",
              " Class_att      Abnormal\n",
              " dtype: object, Col1          129.834\n",
              " Col2          49.4319\n",
              " Col3          125.742\n",
              " Col4           121.43\n",
              " Col5          163.071\n",
              " Col6          418.543\n",
              " Col7         0.998827\n",
              " Col8          36.7439\n",
              " Col9           19.324\n",
              " Col10         16.8211\n",
              " Col11         6.97207\n",
              " Col12         44.3412\n",
              " Class_att      Normal\n",
              " dtype: object, Col1      60.496653\n",
              " Col2      17.542822\n",
              " Col3      51.930930\n",
              " Col4      42.953831\n",
              " Col5     117.920655\n",
              " Col6      26.296694\n",
              " Col7       0.472979\n",
              " Col8      21.321526\n",
              " Col9      13.064511\n",
              " Col10     11.933317\n",
              " Col11    -14.053139\n",
              " Col12     25.645981\n",
              " dtype: float64, <bound method DataFrame.count of           Col1  ...                                        Unnamed: 13\n",
              " 0    63.027818  ...                                                NaN\n",
              " 1    39.056951  ...                                                NaN\n",
              " 2    68.832021  ...  Prediction is done by using binary classificat...\n",
              " 3    69.297008  ...                                                NaN\n",
              " 4    49.712859  ...                                                NaN\n",
              " ..         ...  ...                                                ...\n",
              " 305  47.903565  ...                                                NaN\n",
              " 306  53.936748  ...                                                NaN\n",
              " 307  61.446597  ...                                                NaN\n",
              " 308  45.252792  ...                                                NaN\n",
              " 309  33.841641  ...                                                NaN\n",
              " \n",
              " [310 rows x 14 columns]>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8qz6tC0VmDBu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "outputId": "a142ca59-6fdf-4756-9638-e9242259e96a"
      },
      "source": [
        "df.corr()"
      ],
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Col1</th>\n",
              "      <th>Col2</th>\n",
              "      <th>Col3</th>\n",
              "      <th>Col4</th>\n",
              "      <th>Col5</th>\n",
              "      <th>Col6</th>\n",
              "      <th>Col7</th>\n",
              "      <th>Col8</th>\n",
              "      <th>Col9</th>\n",
              "      <th>Col10</th>\n",
              "      <th>Col11</th>\n",
              "      <th>Col12</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Col1</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.629199</td>\n",
              "      <td>0.717282</td>\n",
              "      <td>0.814960</td>\n",
              "      <td>-0.247467</td>\n",
              "      <td>0.638743</td>\n",
              "      <td>0.043290</td>\n",
              "      <td>-0.078411</td>\n",
              "      <td>-0.089740</td>\n",
              "      <td>0.016750</td>\n",
              "      <td>0.019240</td>\n",
              "      <td>-0.007251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col2</th>\n",
              "      <td>0.629199</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.432764</td>\n",
              "      <td>0.062345</td>\n",
              "      <td>0.032668</td>\n",
              "      <td>0.397862</td>\n",
              "      <td>0.008852</td>\n",
              "      <td>-0.072119</td>\n",
              "      <td>-0.063394</td>\n",
              "      <td>0.028931</td>\n",
              "      <td>0.032859</td>\n",
              "      <td>-0.056550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col3</th>\n",
              "      <td>0.717282</td>\n",
              "      <td>0.432764</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.598387</td>\n",
              "      <td>-0.080344</td>\n",
              "      <td>0.533667</td>\n",
              "      <td>0.029486</td>\n",
              "      <td>-0.112939</td>\n",
              "      <td>-0.063582</td>\n",
              "      <td>0.063875</td>\n",
              "      <td>0.057199</td>\n",
              "      <td>-0.049054</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col4</th>\n",
              "      <td>0.814960</td>\n",
              "      <td>0.062345</td>\n",
              "      <td>0.598387</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.342128</td>\n",
              "      <td>0.523557</td>\n",
              "      <td>0.048988</td>\n",
              "      <td>-0.046914</td>\n",
              "      <td>-0.067968</td>\n",
              "      <td>-0.000063</td>\n",
              "      <td>0.000207</td>\n",
              "      <td>0.032853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col5</th>\n",
              "      <td>-0.247467</td>\n",
              "      <td>0.032668</td>\n",
              "      <td>-0.080344</td>\n",
              "      <td>-0.342128</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.026065</td>\n",
              "      <td>0.015767</td>\n",
              "      <td>0.063433</td>\n",
              "      <td>0.060477</td>\n",
              "      <td>-0.039800</td>\n",
              "      <td>0.029738</td>\n",
              "      <td>-0.030145</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col6</th>\n",
              "      <td>0.638743</td>\n",
              "      <td>0.397862</td>\n",
              "      <td>0.533667</td>\n",
              "      <td>0.523557</td>\n",
              "      <td>-0.026065</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.085925</td>\n",
              "      <td>-0.063812</td>\n",
              "      <td>-0.057286</td>\n",
              "      <td>0.056576</td>\n",
              "      <td>0.023021</td>\n",
              "      <td>-0.041023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col7</th>\n",
              "      <td>0.043290</td>\n",
              "      <td>0.008852</td>\n",
              "      <td>0.029486</td>\n",
              "      <td>0.048988</td>\n",
              "      <td>0.015767</td>\n",
              "      <td>0.085925</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.012694</td>\n",
              "      <td>-0.011770</td>\n",
              "      <td>0.088017</td>\n",
              "      <td>0.060743</td>\n",
              "      <td>-0.073893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col8</th>\n",
              "      <td>-0.078411</td>\n",
              "      <td>-0.072119</td>\n",
              "      <td>-0.112939</td>\n",
              "      <td>-0.046914</td>\n",
              "      <td>0.063433</td>\n",
              "      <td>-0.063812</td>\n",
              "      <td>0.012694</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.009887</td>\n",
              "      <td>0.072738</td>\n",
              "      <td>-0.037428</td>\n",
              "      <td>-0.024021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col9</th>\n",
              "      <td>-0.089740</td>\n",
              "      <td>-0.063394</td>\n",
              "      <td>-0.063582</td>\n",
              "      <td>-0.067968</td>\n",
              "      <td>0.060477</td>\n",
              "      <td>-0.057286</td>\n",
              "      <td>-0.011770</td>\n",
              "      <td>0.009887</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.052451</td>\n",
              "      <td>0.011354</td>\n",
              "      <td>0.009541</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col10</th>\n",
              "      <td>0.016750</td>\n",
              "      <td>0.028931</td>\n",
              "      <td>0.063875</td>\n",
              "      <td>-0.000063</td>\n",
              "      <td>-0.039800</td>\n",
              "      <td>0.056576</td>\n",
              "      <td>0.088017</td>\n",
              "      <td>0.072738</td>\n",
              "      <td>0.052451</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.057451</td>\n",
              "      <td>0.021243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col11</th>\n",
              "      <td>0.019240</td>\n",
              "      <td>0.032859</td>\n",
              "      <td>0.057199</td>\n",
              "      <td>0.000207</td>\n",
              "      <td>0.029738</td>\n",
              "      <td>0.023021</td>\n",
              "      <td>0.060743</td>\n",
              "      <td>-0.037428</td>\n",
              "      <td>0.011354</td>\n",
              "      <td>0.057451</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.015337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Col12</th>\n",
              "      <td>-0.007251</td>\n",
              "      <td>-0.056550</td>\n",
              "      <td>-0.049054</td>\n",
              "      <td>0.032853</td>\n",
              "      <td>-0.030145</td>\n",
              "      <td>-0.041023</td>\n",
              "      <td>-0.073893</td>\n",
              "      <td>-0.024021</td>\n",
              "      <td>0.009541</td>\n",
              "      <td>0.021243</td>\n",
              "      <td>0.015337</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           Col1      Col2      Col3  ...     Col10     Col11     Col12\n",
              "Col1   1.000000  0.629199  0.717282  ...  0.016750  0.019240 -0.007251\n",
              "Col2   0.629199  1.000000  0.432764  ...  0.028931  0.032859 -0.056550\n",
              "Col3   0.717282  0.432764  1.000000  ...  0.063875  0.057199 -0.049054\n",
              "Col4   0.814960  0.062345  0.598387  ... -0.000063  0.000207  0.032853\n",
              "Col5  -0.247467  0.032668 -0.080344  ... -0.039800  0.029738 -0.030145\n",
              "Col6   0.638743  0.397862  0.533667  ...  0.056576  0.023021 -0.041023\n",
              "Col7   0.043290  0.008852  0.029486  ...  0.088017  0.060743 -0.073893\n",
              "Col8  -0.078411 -0.072119 -0.112939  ...  0.072738 -0.037428 -0.024021\n",
              "Col9  -0.089740 -0.063394 -0.063582  ...  0.052451  0.011354  0.009541\n",
              "Col10  0.016750  0.028931  0.063875  ...  1.000000  0.057451  0.021243\n",
              "Col11  0.019240  0.032859  0.057199  ...  0.057451  1.000000  0.015337\n",
              "Col12 -0.007251 -0.056550 -0.049054  ...  0.021243  0.015337  1.000000\n",
              "\n",
              "[12 rows x 12 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DPGubtgmlRj1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "a308ee00-5b1a-4828-d9a2-9ebc1fdc3a28"
      },
      "source": [
        "df.rename(columns={\"Col8\":\"place\"},inplace=True)\n",
        "df.head(5)\n"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Col1</th>\n",
              "      <th>Col2</th>\n",
              "      <th>Col3</th>\n",
              "      <th>Col4</th>\n",
              "      <th>Col5</th>\n",
              "      <th>Col6</th>\n",
              "      <th>Col7</th>\n",
              "      <th>place</th>\n",
              "      <th>Col9</th>\n",
              "      <th>Col10</th>\n",
              "      <th>Col11</th>\n",
              "      <th>Col12</th>\n",
              "      <th>Class_att</th>\n",
              "      <th>Unnamed: 13</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>63.027818</td>\n",
              "      <td>22.552586</td>\n",
              "      <td>39.609117</td>\n",
              "      <td>40.475232</td>\n",
              "      <td>98.672917</td>\n",
              "      <td>-0.254400</td>\n",
              "      <td>0.744503</td>\n",
              "      <td>12.5661</td>\n",
              "      <td>14.5386</td>\n",
              "      <td>15.30468</td>\n",
              "      <td>-28.658501</td>\n",
              "      <td>43.5123</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>39.056951</td>\n",
              "      <td>10.060991</td>\n",
              "      <td>25.015378</td>\n",
              "      <td>28.995960</td>\n",
              "      <td>114.405425</td>\n",
              "      <td>4.564259</td>\n",
              "      <td>0.415186</td>\n",
              "      <td>12.8874</td>\n",
              "      <td>17.5323</td>\n",
              "      <td>16.78486</td>\n",
              "      <td>-25.530607</td>\n",
              "      <td>16.1102</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>68.832021</td>\n",
              "      <td>22.218482</td>\n",
              "      <td>50.092194</td>\n",
              "      <td>46.613539</td>\n",
              "      <td>105.985135</td>\n",
              "      <td>-3.530317</td>\n",
              "      <td>0.474889</td>\n",
              "      <td>26.8343</td>\n",
              "      <td>17.4861</td>\n",
              "      <td>16.65897</td>\n",
              "      <td>-29.031888</td>\n",
              "      <td>19.2221</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>Prediction is done by using binary classificat...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>69.297008</td>\n",
              "      <td>24.652878</td>\n",
              "      <td>44.311238</td>\n",
              "      <td>44.644130</td>\n",
              "      <td>101.868495</td>\n",
              "      <td>11.211523</td>\n",
              "      <td>0.369345</td>\n",
              "      <td>23.5603</td>\n",
              "      <td>12.7074</td>\n",
              "      <td>11.42447</td>\n",
              "      <td>-30.470246</td>\n",
              "      <td>18.8329</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>49.712859</td>\n",
              "      <td>9.652075</td>\n",
              "      <td>28.317406</td>\n",
              "      <td>40.060784</td>\n",
              "      <td>108.168725</td>\n",
              "      <td>7.918501</td>\n",
              "      <td>0.543360</td>\n",
              "      <td>35.4940</td>\n",
              "      <td>15.9546</td>\n",
              "      <td>8.87237</td>\n",
              "      <td>-16.378376</td>\n",
              "      <td>24.9171</td>\n",
              "      <td>Abnormal</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Col1  ...                                        Unnamed: 13\n",
              "0  63.027818  ...                                                NaN\n",
              "1  39.056951  ...                                                NaN\n",
              "2  68.832021  ...  Prediction is done by using binary classificat...\n",
              "3  69.297008  ...                                                NaN\n",
              "4  49.712859  ...                                                NaN\n",
              "\n",
              "[5 rows x 14 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_rAoW7SsnLG3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "outputId": "9959b842-be9e-45a1-fea5-0c6e06959d6c"
      },
      "source": [
        ""
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-127-e37b56e13de5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m\"Col1\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Col2\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"Col3\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, method, min_periods)\u001b[0m\n\u001b[1;32m   7544\u001b[0m                 \u001b[0;34m\"method must be either 'pearson', \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7545\u001b[0m                 \u001b[0;34m\"'spearman', 'kendall', or a callable, \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7546\u001b[0;31m                 \u001b[0;34m\"'{method}' was supplied\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7547\u001b[0m             )\n\u001b[1;32m   7548\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: method must be either 'pearson', 'spearman', 'kendall', or a callable, '{'Col2', 'Col3', 'Col1'}' was supplied"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CVkLw28BoG5d",
        "colab_type": "text"
      },
      "source": [
        "# New Section"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "96E8VoDZDbqP",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "16215faa-05ec-489f-957f-5eaff371d5d6"
      },
      "source": [
        "df.index"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RangeIndex(start=0, stop=310, step=1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hi3YZu-sQw2q",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 126
        },
        "outputId": "5f55197e-3f3c-46eb-de86-63b5d6051779"
      },
      "source": [
        "l1=[1,2,3,4,5,6]\n",
        "l2=[6,5,4,3,2,1]\n",
        "for i,j in zip(l1,l2):\n",
        "  \n",
        "     if i > j:\n",
        "      print(\"l1 is greater\")\n",
        "     else:\n",
        "      print(\"l2 is greater\")\n"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "l2 is greater\n",
            "l2 is greater\n",
            "l2 is greater\n",
            "l1 is greater\n",
            "l1 is greater\n",
            "l1 is greater\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0LOC6g6iZHpp",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "outputId": "fcfcea05-d5e6-4be9-f1b8-ddddfefed5b1"
      },
      "source": [
        "l3=(10,20,30,40,50)\n",
        "for i in l3:\n",
        "  print(i+5)"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "15\n",
            "25\n",
            "35\n",
            "45\n",
            "55\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "P-567LWBZ8No",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "6cd657f9-fb3c-48e7-8ae4-2d750ef0ff35"
      },
      "source": [
        "tuple(i+5 for i in l3)"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(15, 25, 35, 45, 55)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UhiPo8iSaIdd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "c2067212-0054-4a6d-fd85-6f2a15422813"
      },
      "source": [
        "def add_10(x):\n",
        "    return x+10\n",
        "add_10(300)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "310"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6AQS1DxcbCg7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "3823a50f-2410-4062-fc11-99fce9ee8a02"
      },
      "source": [
        "def odd_even(x):\n",
        "    if x%2==0:\n",
        "      print(\"even\")\n",
        "    else:\n",
        "      print(\"odd\")\n",
        "odd_even(30)"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "even\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WQyjxTQbb26A",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "outputId": "1e5724b8-0f68-43cc-fddd-10a749ea5193"
      },
      "source": [
        "import numpy as np\n",
        "np.zeros((5,5))"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 0.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BnBVbaOoaK8R",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "edaf45c1-a6e6-498c-d33b-1ce3c3c31b32"
      },
      "source": [
        "np.arange(10,105,5)"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 10,  15,  20,  25,  30,  35,  40,  45,  50,  55,  60,  65,  70,\n",
              "        75,  80,  85,  90,  95, 100])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Uqwt5tMZe7aE",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "eeb459e1-c1e3-4b60-f270-1a6e958e4ef7"
      },
      "source": [
        "np.linspace(0,100,5)"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  0.,  25.,  50.,  75., 100.])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z9Y1bU-UfWZt",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "e72add26-2584-4df0-f02d-f248529fd6c1"
      },
      "source": [
        "a=np.array([10,20,30,40,50,60])\n",
        "a.shape=(2,3)\n",
        "a"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[10, 20, 30],\n",
              "       [40, 50, 60]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Yad-X20gLby",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "53bcfea7-35f8-4502-b2d3-30f32a921862"
      },
      "source": [
        "type(a)"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nzZtNamxglkj",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "7e72b680-7d78-4cba-92b8-2b386183b4bc"
      },
      "source": [
        "a.size"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mdIwbJ5mfWf7",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "outputId": "5ac9a39a-f791-4d22-f7c0-a3c24d9e2735"
      },
      "source": [
        "b=np.array([1,2,3])\n",
        "c=np.array([4,5,6])\n",
        "print(b+c)\n",
        "print(b-c)\n",
        "print(b*c)\n",
        "print(b/c)\n"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[5 7 9]\n",
            "[-3 -3 -3]\n",
            "[ 4 10 18]\n",
            "[0.25 0.4  0.5 ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gptJU2WCiOru",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "outputId": "8ad265ef-39f2-4799-fec7-22e039f88754"
      },
      "source": [
        "d=np.random.randint(10,90,(3,3))\n",
        "d"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[88, 62, 48],\n",
              "       [74, 44, 67],\n",
              "       [41, 16, 76]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BXym3ljpikL8",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "fb2cd3f8-bcf4-482c-d160-2e6fdd3e636f"
      },
      "source": [
        "d[:,2]"
      ],
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([48, 67, 76])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CjsxQlXOjV_r",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "b0e40a39-d0e0-4e0e-906f-6f9f5b01d0c0"
      },
      "source": [
        "d[1,:]"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([74, 44, 67])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kr7nlBRWjhSV",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "outputId": "24acbb8c-6cdb-41b9-80f8-8753cbd1620a"
      },
      "source": [
        "d[0:2,0:2]"
      ],
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[88, 62],\n",
              "       [74, 44]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q0uxEiXAjx_u",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df1=pd.read_csv(\"insurance.csv\")\n",
        "insurancesave=df1.loc[500:1000,[\"sex\",\"children\",\"region\"]]\n",
        "insurancesave.to_csv(\"result\")"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iWkmsB1mqj_o",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "ced15351-3dc3-4cc6-e019-8fa50cb998b1"
      },
      "source": [
        "df1.sort_values(\"age\",ascending=\"False\")"
      ],
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1248</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>39.820</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1633.96180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>482</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>31.350</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1622.18850</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>492</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>25.080</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>2196.47320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>525</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>33.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>11482.63485</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>529</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>25.460</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>1708.00140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>398</th>\n",
              "      <td>64</td>\n",
              "      <td>male</td>\n",
              "      <td>25.600</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>southwest</td>\n",
              "      <td>14988.43200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>335</th>\n",
              "      <td>64</td>\n",
              "      <td>male</td>\n",
              "      <td>34.500</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southwest</td>\n",
              "      <td>13822.80300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>64</td>\n",
              "      <td>female</td>\n",
              "      <td>30.115</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>16455.70785</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1265</th>\n",
              "      <td>64</td>\n",
              "      <td>male</td>\n",
              "      <td>23.760</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southeast</td>\n",
              "      <td>26926.51440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>635</th>\n",
              "      <td>64</td>\n",
              "      <td>male</td>\n",
              "      <td>38.190</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>14410.93210</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1338 rows × 7 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      age     sex     bmi  children smoker     region      charges\n",
              "1248   18  female  39.820         0     no  southeast   1633.96180\n",
              "482    18  female  31.350         0     no  southeast   1622.18850\n",
              "492    18  female  25.080         0     no  northeast   2196.47320\n",
              "525    18  female  33.880         0     no  southeast  11482.63485\n",
              "529    18    male  25.460         0     no  northeast   1708.00140\n",
              "...   ...     ...     ...       ...    ...        ...          ...\n",
              "398    64    male  25.600         2     no  southwest  14988.43200\n",
              "335    64    male  34.500         0     no  southwest  13822.80300\n",
              "378    64  female  30.115         3     no  northwest  16455.70785\n",
              "1265   64    male  23.760         0    yes  southeast  26926.51440\n",
              "635    64    male  38.190         0     no  northeast  14410.93210\n",
              "\n",
              "[1338 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 151
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NkixM4j2tklf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "outputId": "e8692840-8832-41ce-8381-f46be557b5d3"
      },
      "source": [
        "df1[\"sex\"].corr(df1[\"region\"])"
      ],
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-153-59ba17a88f21>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"sex\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"region\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36mcorr\u001b[0;34m(self, other, method, min_periods)\u001b[0m\n\u001b[1;32m   2453\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"pearson\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"spearman\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"kendall\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mcallable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2454\u001b[0m             return nanops.nancorr(\n\u001b[0;32m-> 2455\u001b[0;31m                 \u001b[0mthis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmin_periods\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmin_periods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2456\u001b[0m             )\n\u001b[1;32m   2457\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36m_f\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minvalid\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mValueError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m                 \u001b[0;31m# we want to transform an object array\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36mnancorr\u001b[0;34m(a, b, method, min_periods)\u001b[0m\n\u001b[1;32m   1244\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1245\u001b[0m     \u001b[0mf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_corr_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1246\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1247\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1248\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/nanops.py\u001b[0m in \u001b[0;36m_pearson\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m   1254\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1255\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_pearson\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1256\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorrcoef\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1257\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1258\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_kendall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mcorrcoef\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36mcorrcoef\u001b[0;34m(x, y, rowvar, bias, ddof)\u001b[0m\n\u001b[1;32m   2524\u001b[0m         warnings.warn('bias and ddof have no effect and are deprecated',\n\u001b[1;32m   2525\u001b[0m                       DeprecationWarning, stacklevel=3)\n\u001b[0;32m-> 2526\u001b[0;31m     \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcov\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrowvar\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2527\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2528\u001b[0m         \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdiag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mcov\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36mcov\u001b[0;34m(m, y, rowvar, bias, ddof, fweights, aweights)\u001b[0m\n\u001b[1;32m   2429\u001b[0m             \u001b[0mw\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0maweights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2430\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2431\u001b[0;31m     \u001b[0mavg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw_sum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maverage\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweights\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreturned\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2432\u001b[0m     \u001b[0mw_sum\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mw_sum\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2433\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36maverage\u001b[0;34m(*args, **kwargs)\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/lib/function_base.py\u001b[0m in \u001b[0;36maverage\u001b[0;34m(a, axis, weights, returned)\u001b[0m\n\u001b[1;32m    388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    389\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mweights\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 390\u001b[0;31m         \u001b[0mavg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    391\u001b[0m         \u001b[0mscl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mavg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mavg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_mean\u001b[0;34m(a, axis, dtype, out, keepdims)\u001b[0m\n\u001b[1;32m    152\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    153\u001b[0m         ret = um.true_divide(\n\u001b[0;32m--> 154\u001b[0;31m                 ret, rcount, out=ret, casting='unsafe', subok=False)\n\u001b[0m\u001b[1;32m    155\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_float16_result\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mout\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m             \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mret\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for /: 'str' and 'int'"
          ]
        }
      ]
    }
  ]
}